/**
 * Copyright (C) 2005-2011 BetaCONCEPT LP.
 *
 * This file is part of BetaCONCEPT Framework (betaconceptframework.org) modules.
 *
 * BetaCONCEPT Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BetaCONCEPT Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with BetaCONCEPT Framework.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
}

PARSER_BEGIN(CriterionParser)


package  org.betaconceptframework.astroboa.model.impl.query.parser;


import org.betaconceptframework.astroboa.api.model.query.criteria.ContentObjectCriteria;
import org.betaconceptframework.astroboa.api.model.query.criteria.CmsCriteria.SearchMode;
import org.betaconceptframework.astroboa.api.model.query.criteria.TopicCriteria;
import org.betaconceptframework.astroboa.api.model.query.criteria.LocalizationCriterion;
import org.betaconceptframework.astroboa.model.impl.item.CmsBuiltInItem;
import org.betaconceptframework.astroboa.api.model.query.criteria.Criterion;
import org.betaconceptframework.astroboa.api.model.query.Condition;
import org.betaconceptframework.astroboa.api.model.query.QueryOperator;
import org.betaconceptframework.astroboa.model.factory.CriterionFactory;
import org.betaconceptframework.astroboa.model.factory.CmsCriteriaFactory;
import org.betaconceptframework.astroboa.util.DateUtils;
import org.apache.commons.lang.StringUtils;

import java.util.Calendar;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * @author Gregory Chomatas (gchomatas@betaconcept.com)
 * @author Savvas Triantafyllou (striantafyllou@betaconcept.com)
 * 
 */
 public class CriterionParser {
 
    private final static String ISO8601_DATE_FORMAT = "yyyy-MM-dd";

	private final static String DATE_REG_EXP = "((?:19|20)(?:\\d\\d))-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])";
	private final static String TIME_REG_EXP = "T([01][0-9]|2[0123]):([0-5][0-9]):([0-5][0-9])(.\\d\\d\\d)?";
	private final static String TIME_ZONE_REG_EXP ="(Z|((?:\\+|-)[0-5][0-9]:[0-5][0-9]))?";

	private final static String ISO8601_REG_EXP="^"+DATE_REG_EXP+TIME_REG_EXP+TIME_ZONE_REG_EXP+"$";

	private Pattern ISO8601Pattern = Pattern.compile(ISO8601_REG_EXP);
	private Pattern ISO8601DatePattern = Pattern.compile(DATE_REG_EXP);
 
 
    private ContentObjectCriteria contentObjectCriteria;
    private TopicCriteria topicCriteria;
    
   public void parseExpressionAndAppendCriteria(ContentObjectCriteria contentObjectCriteria) throws ParseException {
    
    try {
    	this.contentObjectCriteria = contentObjectCriteria;

    	this.contentObjectCriteria.addCriterion(UnifiedCriterion());
      
    }
    catch (TokenMgrError tme) {
      throw new ParseException(tme.getMessage());
    }
  }

   public void parseExpressionAndAppendTopicCriteria(TopicCriteria topicCriteria) throws ParseException {
    
    try {
    	this.topicCriteria = topicCriteria;

    	this.topicCriteria.addCriterion(UnifiedCriterion());
      
    }
    catch (TokenMgrError tme) {
      throw new ParseException(tme.getMessage());
    }
  }
  
  public Criterion createSimpleCriterion(String propertyPath, QueryOperator queryOperator, String value) throws ParseException{
  
     /**
      * Strip '"' and ''' from the beginning and the end of the value
      */
      if (value != null){
     	value = StringUtils.removeStart(value, "\"");
     	value = StringUtils.removeEnd(value, "\"");
     	value = StringUtils.removeStart(value, "'");
     	value = StringUtils.removeEnd(value, "'");
     	
     	value = value.trim();
     	
     	if (StringUtils.isBlank(value)){
			return null;
		}

		
     	//Reserved property paths for content object criteria
     	if ("contentTypeName".equals(propertyPath) && contentObjectCriteria != null){
   			return contentObjectCriteria.createContentObjectTypeEqualsCriterion(value);
     	}
     	else if ("textSearched".equals(propertyPath) && contentObjectCriteria != null){
   			contentObjectCriteria.addFullTextSearchCriterion(value);
			return null;
     	}
     	else if ("id".equals(propertyPath)){
     		propertyPath = CmsBuiltInItem.CmsIdentifier.getJcrName();
     	}
     	else if ("systemName".equals(propertyPath) && contentObjectCriteria != null){
     		propertyPath = CmsBuiltInItem.SystemName.getJcrName();
     	}
     	else if (topicCriteria != null){
			
			if ("name".equals(propertyPath)){
   				propertyPath = CmsBuiltInItem.Name.getJcrName();
			}
			else if ("taxonomy".equals(propertyPath)){
				//Currently we ignore operator provided by the user
				//due to the restricted supported of taxonomy criterion
				//In the next release, we will take it into account :-)
				topicCriteria.addTaxonomyNameEqualsCriterion(value);
				return null;
			}
			else if (propertyPath.startsWith("label")){
				return createLocalizationCriterion(propertyPath, value, queryOperator);
			}
			else if ("ancestor.name".equals(propertyPath)){
				TopicCriteria parentCriteria = topicCriteria.getAncestorCriteria();
				if (parentCriteria == null){
					parentCriteria = CmsCriteriaFactory.newTopicCriteria();
					parentCriteria.setSearchMode(SearchMode.SEARCH_ALL_ENTITIES);
					topicCriteria.setAncestorCriteria(parentCriteria);
				}
				
				if (QueryOperator.EQUALS == queryOperator){
					parentCriteria.addNameEqualsCriterion(value);
					return null;
				}
				else{
					parentCriteria.addCriterion(CriterionFactory.createSimpleCriterion(CmsBuiltInItem.Name.getJcrName(), value, queryOperator));
     				return null;
				}
			}
			else if (propertyPath.startsWith("ancestor.label")){
				TopicCriteria parentCriteria = topicCriteria.getAncestorCriteria();
				if (parentCriteria == null){
					parentCriteria = CmsCriteriaFactory.newTopicCriteria();
					parentCriteria.setSearchMode(SearchMode.SEARCH_ALL_ENTITIES);
					topicCriteria.setAncestorCriteria(parentCriteria);
				}

				//Remove 'parent.' from proerty path
				LocalizationCriterion locLabelCriterion = createLocalizationCriterion(StringUtils.substringAfter(propertyPath,"."), value, queryOperator);

				parentCriteria.addCriterion(locLabelCriterion);
				return null;
			}
			else if (propertyPath.equals("ancestor.id")){
				TopicCriteria parentCriteria = topicCriteria.getAncestorCriteria();
				if (parentCriteria == null){
					parentCriteria = CmsCriteriaFactory.newTopicCriteria();
					parentCriteria.setSearchMode(SearchMode.SEARCH_ALL_ENTITIES);
					topicCriteria.setAncestorCriteria(parentCriteria);
				}

				parentCriteria.addCriterion(CriterionFactory.createSimpleCriterion(CmsBuiltInItem.CmsIdentifier.getJcrName(), value, queryOperator));
    			return null;
			}

     	}
     	
     	
     	//Special care for Boolean values
     	//Need to pass Boolean Object
     	if ("true".equalsIgnoreCase(value)){
     		return CriterionFactory.createSimpleCriterion(propertyPath, Boolean.TRUE, queryOperator);
     	}
     	else if ("false".equalsIgnoreCase(value)){
     		return CriterionFactory.createSimpleCriterion(propertyPath, Boolean.FALSE, queryOperator);
     	}
     	
     	//Dates also need special care. Check if value is a date
     	Calendar dateValue = checkIfValueIsISO8601Date(value);
     	
     	if (dateValue != null){
     		return CriterionFactory.createSimpleCriterion(propertyPath, dateValue, queryOperator);
     	}
      }
     
      return CriterionFactory.createSimpleCriterion(propertyPath, value, queryOperator);
     	
  }
  
  private LocalizationCriterion createLocalizationCriterion(String propertyPath, String value, QueryOperator queryOperator){
	  	LocalizationCriterion locLabelCriterion = CriterionFactory.newLocalizationCriterion();
		locLabelCriterion.addLocalizedLabel(value);
		locLabelCriterion.setQueryOperator(queryOperator);
			
		//If locale is provided then it is expected to be after label , 
		//i.e. label.en
		String locale = StringUtils.substringAfter(propertyPath,".");
		if (locale != null){
			locLabelCriterion.setLocale(locale);
		}
		return locLabelCriterion;
  }
  
  /**
	 * If provided value is a valid ISO8601 date then equivalent calendar is returned
	 * 
	 * @param value
	 * @return
	 * @throws ParseException 
	 */
		private Calendar checkIfValueIsISO8601Date(String value){

		if (StringUtils.isBlank(value)){
			return null;
		}

		Calendar date = null;


		try{
			Matcher dateTimeMatcher = ISO8601Pattern.matcher(value);

			if (dateTimeMatcher.matches()){

				StringBuilder pattern = new StringBuilder("yyyy-MM-dd'T'HH:mm:ss");
				String timeZoneId = null;
				//We must decide which pattern to use
				//At this point this is the minimum

				//Group 7 corresponds to milli seconds
				if (dateTimeMatcher.groupCount()>=7 && dateTimeMatcher.group(7) != null){
					pattern.append(".SSS");
				}
				if (dateTimeMatcher.groupCount()>=8 && dateTimeMatcher.group(8) != null){
					if (!"Z".equals(dateTimeMatcher.group(8))){
						//Keep UTC info to look for time zone when Calendar object will be created, 
						//as SimpleDateformat which is used in DateUtils
						//cannot handle time zone designator
						timeZoneId = "GMT"+dateTimeMatcher.group(8);
						value = value.replace(dateTimeMatcher.group(8), "");
					}
					else{
						timeZoneId = "GMT";
						value = value.replace("Z", "");
					}
				}

				date = (Calendar) DateUtils.fromString(value, pattern.toString());

				if (timeZoneId!= null){
					//Now that date is found we should define its TimeZone
					TimeZone timeZone = TimeZone.getTimeZone(timeZoneId);
					if (!timeZone.getID().equals(timeZoneId)) {
						// Time Zone is not valid
						throw new ParseException("Invalid time zone in date value "+ value);
					}

					date.setTimeZone(timeZone);
				}
			}
			else{
				//check for simple date
				Matcher dateMatcher = ISO8601DatePattern.matcher(value);

				if (dateMatcher.matches()){
					date = (Calendar) DateUtils.fromString(value, ISO8601_DATE_FORMAT);
				}
			}

		}
		catch(Exception e){
			//Probably not a date value. Ignore exception
			return null;
		}

		return date;


	}
 }
PARSER_END(CriterionParser)

/* ***************** */
/* Token Definitions */
/* ***************** */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


//* The following TOKENS come from XPath.jjt found in jackrabbit-spi-commons 
//* slightly changed to meet our needs. Basicly NMchar is a subset of what actually
//* is defined in the aforementionned jjt



TOKEN :
{
 < #NCName : <Nmstart> (<Nmchar>)* >
}

TOKEN :
{
 < #Nmstart : (<Letter> | "_") >
}

TOKEN :
{
 < #Nmchar : (<Letter> | <Digit> ) >
}

TOKEN :
{
 < #Digit : ["\u0030" - "\u0039", "\u0660" - "\u0669", "\u06f0" - "\u06f9", "\u0966" - "\u096f", "\u09e6" - "\u09ef", "\u0a66" - "\u0a6f", "\u0ae6" - "\u0aef", "\u0b66" - "\u0b6f", "\u0be7" - "\u0bef", "\u0c66" - "\u0c6f", "\u0ce6" - "\u0cef", "\u0d66" - "\u0d6f", "\u0e50" - "\u0e59", "\u0ed0" - "\u0ed9", "\u0f20" - "\u0f29"] >
}


TOKEN :
{
 < #Letter : (<BaseChar> | <Ideographic>) >
}

TOKEN :
{
 < #BaseChar : ["\u0041" - "\u005a", "\u0061" - "\u007a", "\u00c0" - "\u00d6", "\u00d8" - "\u00f6", "\u00f8" - "\u00ff", "\u0100" - "\u0131", "\u0134" - "\u013e", "\u0141" - "\u0148", "\u014a" - "\u017e", "\u0180" - "\u01c3", "\u01cd" - "\u01f0", "\u01f4" - "\u01f5", "\u01fa" - "\u0217", "\u0250" - "\u02a8", "\u02bb" - "\u02c1", "\u0386", "\u0388" - "\u038a", "\u038c", "\u038e" - "\u03a1", "\u03a3" - "\u03ce", "\u03d0" - "\u03d6", "\u03da", "\u03dc", "\u03de", "\u03e0", "\u03e2" - "\u03f3", "\u0401" - "\u040c", "\u040e" - "\u044f", "\u0451" - "\u045c", "\u045e" - "\u0481", "\u0490" - "\u04c4", "\u04c7" - "\u04c8", "\u04cb" - "\u04cc", "\u04d0" - "\u04eb", "\u04ee" - "\u04f5", "\u04f8" - "\u04f9", "\u0531" - "\u0556", "\u0559", "\u0561" - "\u0586", "\u05d0" - "\u05ea", "\u05f0" - "\u05f2", "\u0621" - "\u063a", "\u0641" - "\u064a", "\u0671" - "\u06b7", "\u06ba" - "\u06be", "\u06c0" - "\u06ce", "\u06d0" - "\u06d3", "\u06d5", "\u06e5" - "\u06e6", "\u0905" - "\u0939", "\u093d", "\u0958" - "\u0961", "\u0985" - "\u098c", "\u098f" - "\u0990", "\u0993" - "\u09a8", "\u09aa" - "\u09b0", "\u09b2", "\u09b6" - "\u09b9", "\u09dc" - "\u09dd", "\u09df" - "\u09e1", "\u09f0" - "\u09f1", "\u0a05" - "\u0a0a", "\u0a0f" - "\u0a10", "\u0a13" - "\u0a28", "\u0a2a" - "\u0a30", "\u0a32" - "\u0a33", "\u0a35" - "\u0a36", "\u0a38" - "\u0a39", "\u0a59" - "\u0a5c", "\u0a5e", "\u0a72" - "\u0a74", "\u0a85" - "\u0a8b", "\u0a8d", "\u0a8f" - "\u0a91", "\u0a93" - "\u0aa8", "\u0aaa" - "\u0ab0", "\u0ab2" - "\u0ab3", "\u0ab5" - "\u0ab9", "\u0abd", "\u0ae0", "\u0b05" - "\u0b0c", "\u0b0f" - "\u0b10", "\u0b13" - "\u0b28", "\u0b2a" - "\u0b30", "\u0b32" - "\u0b33", "\u0b36" - "\u0b39", "\u0b3d", "\u0b5c" - "\u0b5d", "\u0b5f" - "\u0b61", "\u0b85" - "\u0b8a", "\u0b8e" - "\u0b90", "\u0b92" - "\u0b95", "\u0b99" - "\u0b9a", "\u0b9c", "\u0b9e" - "\u0b9f", "\u0ba3" - "\u0ba4", "\u0ba8" - "\u0baa", "\u0bae" - "\u0bb5", "\u0bb7" - "\u0bb9", "\u0c05" - "\u0c0c", "\u0c0e" - "\u0c10", "\u0c12" - "\u0c28", "\u0c2a" - "\u0c33", "\u0c35" - "\u0c39", "\u0c60" - "\u0c61", "\u0c85" - "\u0c8c", "\u0c8e" - "\u0c90", "\u0c92" - "\u0ca8", "\u0caa" - "\u0cb3", "\u0cb5" - "\u0cb9", "\u0cde", "\u0ce0" - "\u0ce1", "\u0d05" - "\u0d0c", "\u0d0e" - "\u0d10", "\u0d12" - "\u0d28", "\u0d2a" - "\u0d39", "\u0d60" - "\u0d61", "\u0e01" - "\u0e2e", "\u0e30", "\u0e32" - "\u0e33", "\u0e40" - "\u0e45", "\u0e81" - "\u0e82", "\u0e84", "\u0e87" - "\u0e88", "\u0e8a", "\u0e8d", "\u0e94" - "\u0e97", "\u0e99" - "\u0e9f", "\u0ea1" - "\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa" - "\u0eab", "\u0ead" - "\u0eae", "\u0eb0", "\u0eb2" - "\u0eb3", "\u0ebd", "\u0ec0" - "\u0ec4", "\u0f40" - "\u0f47", "\u0f49" - "\u0f69", "\u10a0" - "\u10c5", "\u10d0" - "\u10f6", "\u1100", "\u1102" - "\u1103", "\u1105" - "\u1107", "\u1109", "\u110b" - "\u110c", "\u110e" - "\u1112", "\u113c", "\u113e", "\u1140", "\u114c", "\u114e", "\u1150", "\u1154" - "\u1155", "\u1159", "\u115f" - "\u1161", "\u1163", "\u1165", "\u1167", "\u1169", "\u116d" - "\u116e", "\u1172" - "\u1173", "\u1175", "\u119e", "\u11a8", "\u11ab", "\u11ae" - "\u11af", "\u11b7" - "\u11b8", "\u11ba", "\u11bc" - "\u11c2", "\u11eb", "\u11f0", "\u11f9", "\u1e00" - "\u1e9b", "\u1ea0" - "\u1ef9", "\u1f00" - "\u1f15", "\u1f18" - "\u1f1d", "\u1f20" - "\u1f45", "\u1f48" - "\u1f4d", "\u1f50" - "\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f" - "\u1f7d", "\u1f80" - "\u1fb4", "\u1fb6" - "\u1fbc", "\u1fbe", "\u1fc2" - "\u1fc4", "\u1fc6" - "\u1fcc", "\u1fd0" - "\u1fd3", "\u1fd6" - "\u1fdb", "\u1fe0" - "\u1fec", "\u1ff2" - "\u1ff4", "\u1ff6" - "\u1ffc", "\u2126", "\u212a" - "\u212b", "\u212e", "\u2180" - "\u2182", "\u3041" - "\u3094", "\u30a1" - "\u30fa", "\u3105" - "\u312c", "\uac00" - "\ud7a3"] >
}

TOKEN :
{
 < #Ideographic : ["\u4e00" - "\u9fa5", "\u3007", "\u3021" - "\u3029"] >
}


TOKEN : {
  <AND:       ("AND" | "and") >
| <OR:        ("OR" | "or") >
| <LPAREN:    "(" >
| <RPAREN:    ")" >
| <LIKE:     "%%" >
| <EQUALS:"=">
| <NOT_EQUALS:"!=">
| <GREATER:">">
| <LESS:"<">
| <GREATER_EQUAL:">=">
| <LESS_EQUAL:"<=">
| <IS_NULL:"IS_NULL">
| <IS_NOT_NULL:"IS_NOT_NULL">
| <CONTAINS:"CONTAINS">
| <PROPERTY_PATH: <NCName> ( ("." | ":") <NCName> ) * >
| <VALUE:  <StringLiteral>  >

}

TOKEN :
{
 < StringLiteral : (("\"" ((("\"" "\"") | ~["\""]))* "\"") | ("'" ((("'" "'") | ~["'"]))* "'")) > 
}


Condition Condition() : {
	Token t;
}
{
	t=<AND> {return Condition.AND;}
 |  t=<OR> {return Condition.OR;}
}

QueryOperator QueryOperator() : {
  Token t;
}
{
   t=<EQUALS> { return QueryOperator.EQUALS; }
 | t=<NOT_EQUALS> { return QueryOperator.NOT_EQUALS; }
 | t=<GREATER> { return QueryOperator.GREATER; }
 | t=<GREATER_EQUAL> { return QueryOperator.GREATER_EQUAL; }
 | t=<LESS> { return QueryOperator.LESS; }
 | t=<LESS_EQUAL> { return QueryOperator.LESS_EQUAL; }
 | t=<LIKE> { return QueryOperator.LIKE; }
 | t=<CONTAINS> { return QueryOperator.CONTAINS; }
}
 
QueryOperator NullOrNotNullQueryOperator() : {
  Token t;
}
{
   t=<IS_NULL> { return QueryOperator.IS_NULL; }
 | t=<IS_NOT_NULL> { return QueryOperator.IS_NOT_NULL; }
}


String GetProperty() : {
Token propertyToken;
}
{
 propertyToken=<PROPERTY_PATH> {return propertyToken.toString();}
}

String GetValue() : {
Token valueToken;
}
{
 valueToken=<VALUE> {return valueToken.toString();}
}

Criterion SimpleCriterion() : {
    String propertyPath;
    QueryOperator op;
    String value = null;
}
{
	LOOKAHEAD(2)
     propertyPath=GetProperty() op=NullOrNotNullQueryOperator()
	    {
    	  return createSimpleCriterion(propertyPath, op, null);
    	}
    |
  
     propertyPath=GetProperty() op=QueryOperator() value=GetValue()  
  	 	{
    	  return createSimpleCriterion(propertyPath, op, value);
   		}
}



Criterion PrimaryCriterion() : {
	Criterion criterion;
}
{
		criterion=SimpleCriterion() {return criterion;}
	|   criterion=ParenCriterion()  {return criterion;}
}

Criterion FullCriterion() : {
	Criterion lhs;
	Criterion rhs;
	Condition condition; 
}
{
	lhs=PrimaryCriterion() ( condition=Condition() rhs=PrimaryCriterion() 
		{	
			if (condition == Condition.AND){
				lhs=CriterionFactory.and(lhs,rhs);
			}
			else if (condition == Condition.OR){
				lhs=CriterionFactory.or(lhs,rhs);
			}
			else{
				throw new ParseException("Invalid Condition" + condition);
			}
		}
		)*
		
	{
		return lhs;
	}
}

Criterion ParenCriterion() : {
 	Criterion criterion;
}
{	
	<LPAREN> criterion=FullCriterion() <RPAREN> {return criterion;}
}

Criterion Expression() : {
	Criterion lhs;
	Criterion rhs;
}
{
	lhs=PrimaryCriterion() ( <OR> rhs=PrimaryCriterion()
		{
			lhs=CriterionFactory.or(lhs,rhs);
		}
		)*
	{
		return lhs;
	}
}

Criterion Criterion() : {
	Criterion criterion;
}
{
	LOOKAHEAD(3)
	criterion=Expression() {return criterion;}
  | criterion=ParenCriterion()	{return criterion;}
}

Criterion UnifiedCriterion() : {
	Criterion lhs;
	Criterion rhs;
}
{
	
	lhs=Criterion() ( <AND> rhs=Criterion() 
		{
			lhs=CriterionFactory.and(lhs,rhs);
		}  
		)*
	{
		return lhs;
	}
}
 