/*
 * Copyright (C) 2005-2011 BetaCONCEPT LP.
 *
 * This file is part of Astroboa.
 *
 * Astroboa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Astroboa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Astroboa.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * 
 */

/**
 * Turn a div into an advanced explorer of the content served
 * by an Astroboa Server. 
 * 
 * 
 * @author Gregory Chomatas (gchomatas@betaconcept.com)
 * @author Savvas Triantafyllou (striantafyllou@betaconcept.com)
 * 
 */
(function($){

	$.fn.astroboaExplorer = function(configuration) {
		var defaultConfiguration = { 
				astroboaServer : window.location.hostname, 
				locale : "en",
				resourceApiBaseURL : "/resource-api"
			};
		
		configuration = $.extend(defaultConfiguration, configuration);
		
		return this.each(function() {
			//Main parameters
			var explorer = $(this),
			
			//Selectors default value
			defaultValueForSelector = '0',
			
			//Selected values
			contentTypeSelectedValue,
			propertySelectedValue,
			operatorSelectedValue,
			referenceSelectedName, //This is the system name of an object or the name of a topic which are selected from the auto complete component
			outputSelectedValue = 'json',

			// This holds all the model of a repository
			//generated by http://server/resource-api/repository-id/model
			//and it is used to populate content type and property selector
			//it is a map whose key is the name of the type and value type's model
			repositoryModel = {},
			
			//http://server/resource-api/repositoty-id/contentObject
			//Its value is updated each time user selects a repository
			baseContentSearchURL,
			queryParameter,
			contentSearchURL,
			
			//Array holding the restrictions
			criteria = new Array(),
			//Array holding the description of the criteria
			criteriaDSL = new Array();
				
			//Selector names
			repositorySelectorName = "repositorySelector",
			languageSelectorName = "languageSelector",
			contentTypeSelectorName = "contentTypeSelector",
			propertySelectorName = "propertySelector",
			operatorSelectorName = "operatorSelector",
			outputSelectorName = "outputSelector",
				
			//Identifiers of various components
			idOfDivOfMainOptions = "mainOptions",
			idOfLanguageSelectorDiv = "languageSelectDiv",
			idOfRepositorySelectorDiv = "repositorySelectDiv",
			idOfTabs = "tabs",
			idOfContentTab = "contentTab",
			idOfTagTab = "tagTab",
			idOfCriterionBuilderDiv= "criterionBuilder",
			idOfContentTypeSelectorDiv = "contentTypeSelectDiv",
			idOfPropertySelectorDiv = "propertySelectDiv",
			idOfOperatorSelectorDiv = "operatorSelectDiv",
			idOfRestrictionDiv = "restrictionDiv",
			idOfRestrictionValueComponent = "restrictionValue",
			idOfCriterionActionsDiv = "criterionActionsDiv",
			idOfCriterionDiv = "criterionDiv",
			idOfButtonForAddingNewCriterion = "addCriterionBtn",
			idOfQueryParametersDiv = "queryParametersDiv",
			idOfCriteriaDiv = "criteriaDiv",
			idOfOutputSelectorDiv = "outputSelectDiv",
			idOfOffsetAndLimitDiv = "offsetAndLimitDiv",
			idOfResultsDiv = "resultsDiv",
			idOfButtonForGeneratingResults = "resultsBtn",
			idOfButtonForResetingResults = "resetBtn",
			idOfResourseApiURLDiv = "apiUrlDiv",
			idOfResultsContainerLabelDiv = "resultsContainerLabel",
			idOfResultsContainerDiv = "resultsContainer",
				
			//Operators
			operator = {
				eq : {value:"=", label:{el:"ΕΙΝΑΙ", en:"EQUALS"}},
				ne : {value:"!=", label:{el:"ΔΕΝ ΕΙΝΑΙ", en:"IS ΝΟΤ EQUALS"}},
				nullOp : {value:"IS_NULL", label:{el:"ΔΕΝ ΕΧΕΙ ΤΙΜΗ", en:"IS NULL"}},
				notNull : {value:"IS_NOT_NULL", label:{el:"ΕΧΕΙ ΤΙΜΗ", en:"IS NOT NULL"}},
				gt : {value:">", label:{el:"ΜΕΓΑΛΥΤΕΡΟ", en:"GREATER THAN"}},
				ge : {value:">=", label:{el:"ΜΕΓΑΛΥΤΕΡΟ Η ΙΣΟ ΜΕ", en:"GREATER THAN OR EQUALS"}},
				lt : {value:"<", label:{el:"ΜΙΚΡΟΤΕΡΟ", en:"LESS THAN"}},
				le : {value:"<=", label:{el:"ΜΙΚΡΟΤΕΡΟ Η ΙΣΟ ΜΕ", en:"LESS THAN OR EQUALS"}},
				contains : {value:"CONTAINS", label:{el:"ΠΕΡΙΕΧΕΙ", en:"CONTAINS"}}
			},
				
			//Various messages
			message = { 
				    repositorySelector : {el:"-- Επιλέξτε Αποθήκη Περιεχομένου --", en:"-- Select Repository --"},
				    languageSelector : {el:"Γλώσσα :", en:"Language :"},
				    contentTabLabel : {el:"Αναζήτηση Περιεχομένου", en:"Explore your content"},
				    tagTabLabel : {el:"Αναζήτηση όρων", en:" Explore your tags"},
				    contentTypeSelector : {el:"-- Όλοι οι τύποι --", en:"-- All Content Types --"},
				    propertySelector : {el:"-- Πεδίο --", en:"-- Property --"},
				    queryParametersSectionLabel : {el:"Επιπλέον Παράμετροι", en:"Miscallenuous options"},
				    addNewCriterion : {el:"+", en:"+"},
				    offset : {el:"Από", en:"Index of first result"},
				    limit : {el:"# αποτελεσμάτων ανά σελίδα", en:"# of results per page"},
				    results : {el:"Αποτελέσματα", en:"Results"},
				    reset : {el:"Καθαρισμός", en:"Reset"},
				    criteriaDivLabel : {el:"Κριτήρια (Καντε κλικ για να το διαγραψετε)", en:"Criteria (Click on the criterion to remove it)"},
				    resourceApiUrlDivLabel : {el:"Resource Api URL", en:"Resource Api URL"},
				    resultsPanelLabel : {el:"Αποτελέσματα", en:"Results"},
				    anyContentTypeCategory : {el:"Αντικείμενα από όλους τους τύπους", en:"Objects of any content type"},
				    anyTaxonomyCategory : {el:"Όροι από όλους τους θησαυρούς", en:"Topics of any taxonomy"}
			},
				
			//CSS classes
			css = {
					selectorDiv : "selectorDiv",
					contentType : "contentType",
					simpleProperty : "simpleProperty",
					complexProperty : "complexProperty"
			};

			//Select Options for Operator component per value type
			operatorOptionsPerType = {  
					String : [operator.eq, operator.ne,operator.nullOp, operator.notNull, operator.contains],
					Date   : [operator.eq, operator.ne,operator.nullOp, operator.notNull, operator.ge, operator.gt, operator.le, operator.lt],
			        Long : [operator.eq, operator.ne,operator.nullOp, operator.notNull, operator.ge, operator.gt, operator.le, operator.lt],
			        Double : [operator.eq, operator.ne,operator.nullOp, operator.notNull, operator.ge, operator.gt, operator.le, operator.lt],
			        TopicReference :  [operator.eq, operator.ne,operator.nullOp, operator.notNull],
			        ObjectReference : [operator.eq, operator.ne,operator.nullOp, operator.notNull]
			},
				
			inputComponentPerType = {
					String : '<input type="text" id="'+idOfRestrictionValueComponent+'" class=" ui-widget-content ui-corner-all"/>',
					Long : '<input type="text" id="'+idOfRestrictionValueComponent+'" class=" ui-widget-content ui-corner-all"/>',
					Double : '<input type="text" id="'+idOfRestrictionValueComponent+'" class=" ui-widget-content ui-corner-all"/>',
					ObjectReference : '<input type="text" id="'+idOfRestrictionValueComponent+'" class=" ui-widget-content ui-corner-all"/>',
					TopicReference : '<input type="text" id="'+idOfRestrictionValueComponent+'" class=" ui-widget-content ui-corner-all"/>',
					Date : '<input type="text" id="'+idOfRestrictionValueComponent+'" class=" ui-widget-content ui-corner-all"/>'
			},
				
				initExplorer();
			
				//Functions
				function initExplorer(){

					setDefaultValuesForContentTab();
					
					explorer.append('<div id="'+idOfDivOfMainOptions+'"></div><p>&nbsp;</p>');
					
					buildLanguageSelector();

					buildRepositorySelector();
					
				}
				
				function buildLanguageSelector(){
					
					if (! elementExists(languageSelectorName)){
						$('#'+idOfDivOfMainOptions).append('<div id="'+idOfLanguageSelectorDiv+'" class="'+css.selectorDiv+'"></div>');
						$('#'+idOfLanguageSelectorDiv).append('<select name="'+languageSelectorName+'" id="'+languageSelectorName+'"></select>');
					}
					else{
						$('#'+languageSelectorName).empty();
					}

					
					var options = '<option value="el"'+ (configuration.locale == 'el' ? 'selected="selected"' : '')+'>Ελληνικά</option>'
						+'<option value="en"'+ (configuration.locale == 'en' ? 'selected="selected"' : '')+'>English</option>';
					
					$('#'+languageSelectorName).append(options);
					
					//Activate JQuery Select Menu plugin
					$("select[name='"+languageSelectorName+"']").selectmenu({
						style:'dropdown',
						change: function(e, object){
					        		configuration.locale = object.value;
					        		changeLanguage();
					    		}
							});
				}

				function changeLanguage(){
					
					buildLanguageSelector();

					buildRepositorySelector();
					
					//Change various labels inside tabs
					$( '#'+idOfTabs + ' ul li:nth-child(1) a').text(message.contentTabLabel[configuration.locale]);
					$( '#'+idOfTabs + ' ul li:nth-child(2) a').text(message.tagTabLabel[configuration.locale]);
					
					if (configuration.repository != defaultValueForSelector){
							
						if (elementExists(idOfContentTab)){
							
							buildContentTypeSelector();
						
							buildPropertySelector();
							
							buildQueryParametersDiv();
							
							$('#'+idOfOffsetAndLimitDiv + ' fieldset label:nth-child(1)').text(message.offset[configuration.locale]);
							$('#'+idOfOffsetAndLimitDiv + ' fieldset label:nth-child(2)').text(message.limit[configuration.locale]);

							if (elementExists(idOfButtonForGeneratingResults)){
								$('#'+idOfButtonForGeneratingResults+' span').text(message.results[configuration.locale]);
								$('#'+idOfButtonForResetingResults+' span').text(message.reset[configuration.locale]);
							}
							
							if (elementExists(idOfResultsContainerLabelDiv)){
								$('#'+idOfResultsContainerLabelDiv + ' h3').text(message.resultsPanelLabel[configuration.locale]);
							}

							
						}
					}
					
				}
				
				function buildRepositorySelector(){
					
					if (! elementExists(repositorySelectorName)){
						$('#'+idOfDivOfMainOptions).append('<div id="'+idOfRepositorySelectorDiv+'" class="'+css.selectorDiv+'"></div>');
						$('#'+idOfRepositorySelectorDiv).append('<select name="'+repositorySelectorName+'" id="'+repositorySelectorName+'"></select>');
					}
					else{
						$('#'+repositorySelectorName).empty();
					}

					var options = '<option value="'+defaultValueForSelector+'"'+ (configuration.repository == undefined ? 'selected="selected"' : '')+'>'+message.repositorySelector[configuration.locale]+'</option>';
					
					var getAllRepositoryURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+"/";

					$.ajax({
						type: "GET",
						dataType : 'json',
					 		data: {output : 'json'},
					 		async : false,
					 		url : getAllRepositoryURL,
					 		success : function(data){

					 			$.each(data.repository, function(i, repository){

					 				var label=retrieveLabel(repository.label, configuration.locale);
					 				
									options = options +'<option value="'+repository.id+'"'+ (configuration.repository == repository.id ? 'selected="selected"' : '')+'>'+label+'</option>';
									
					 			});
							}
					});
					
					$('#'+repositorySelectorName).append(options);
					
					sortSelectorOptions(repositorySelectorName);

					$("select[name='"+repositorySelectorName+"']").selectmenu({
						style:'dropdown',
						change: function(e, object){
								
								configuration.repository = object.value;
								
								buildTabs();
			    			}
						});
					
					if (configuration.repository == undefined){
						$("select[name='"+repositorySelectorName+"']").selectmenu("value", defaultValueForSelector);
					}
					
				}
				
				function setDefaultValuesForContentTab(){
					
					contentTypeSelectedValue = defaultValueForSelector;
					propertySelectedValue = defaultValueForSelector;
					operatorSelectedValue = defaultValueForSelector;
					referenceSelectedName = null;
					

					outputSelectedValue = 'json';
					
					repositoryModel = {};
					
					baseContentSearchURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+'/'+configuration.repository+'/contentObject';
					
					resetQueryParameters();
					
					criteria = new Array();
					criteriaDSL = new Array();

				}
				
				function resetQueryParameters(){
					queryParameter = {
							cmsQuery : '',
							output : outputSelectedValue,
							offset : 0,
							limit : 10,
							prettyPrint : 'true'
						};
				}
				
				function buildTabs(){
					
					if (elementExists(idOfTabs)){
						
						if (configuration.repository == defaultValueForSelector){
							$('#'+idOfTabs).remove();
							
							if (elementExists(idOfResultsDiv)){
								$('#'+idOfResultsDiv).remove();
							}
						}
						else{
							$('#'+idOfContentTab).empty();
							$('#'+idOfTagTab).empty();
						}
					}
					else{
						
						explorer.append('<div id="'+idOfTabs+'"></div>');
						
						//Add ul for tabs
						var html = '<ul><li><a href="#'+idOfContentTab+'">'+message.contentTabLabel[configuration.locale]+'</a></li>';
						html += '<li><a href="#'+idOfTagTab+'">'+message.tagTabLabel[configuration.locale]+'</a></li></ul>';
						
						$('#'+idOfTabs).append(html);
						
						//Add divs for each tab
						$('#'+idOfTabs).append('<div id="'+idOfContentTab+'"></div>');
						$('#'+idOfTabs).append('<div id="'+idOfTagTab+'"></div>');
						
						//Activate tabs
						$( '#'+idOfTabs ).tabs();
						
					}
					
					if (configuration.repository != defaultValueForSelector){
						
						initContentTab();
						
						initTagTab();
						
						buildResultsDiv();
					}					
					
				}
				
				function initTagTab(){
					
				}

				function initContentTab(){
					
					$('#'+idOfContentTab).empty();
					
					setDefaultValuesForContentTab();
					
					$('#'+idOfContentTab).append('<div id="'+idOfCriterionBuilderDiv+'"><div id="'+idOfCriterionDiv+'"></div></div>');
					
					buildContentTypeSelector();
					
					buildPropertySelector();
					
					buildOperatorSelector();
					
					buildQueryParametersDiv();

				}
				
				function buildContentTypeSelector(){
					
					if (! elementExists(contentTypeSelectorName)){
						$('#'+idOfCriterionDiv).append('<div id="'+idOfContentTypeSelectorDiv+'" class="'+css.selectorDiv+'"></div>');
						$('#'+idOfContentTypeSelectorDiv).append('<select name="'+contentTypeSelectorName+'" id="'+contentTypeSelectorName+'"></select>');
					}
					else{
						$('#'+contentTypeSelectorName).empty();
					}
					
					var options = '<option value="'+defaultValueForSelector+'">'+message.contentTypeSelector[configuration.locale]+'</option>';
					
					var getRepositoryModelURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+'/'+configuration.repository+'/model';

					$.ajax({
						type: "GET",
						dataType : 'json',
					 		data: {output : 'json'},
					 		async : false,
					 		url : getRepositoryModelURL,
					 		success : function(data){
					 			
					 			$.each(data.contentType, function(i, contentType){
					 				
					 				repositoryModel[contentType.name] = contentType;
					 				
					 				var label=retrieveLabelForContentType(contentType, configuration.locale);
					 				
					 				options = options +'<option value="'+contentType.name+'" class="'+css.contentType+'"'+ (contentTypeSelectedValue == contentType.name ? ' selected="selected"' : '')+'>'+label+'</option>';
									
					 			});
							}

					});
					
					$('#'+contentTypeSelectorName).append(options);
					
					sortSelectorOptions(contentTypeSelectorName);
					
					$("select[name='"+contentTypeSelectorName+"']").selectmenu({
						style:'dropdown',
						width : 200,
						menuWidth: 300,
						change: function(e, object){
							
								contentTypeSelectedValue = object.value;
								
								buildPropertySelector();

			    			}
						});
					
					if (contentTypeSelectedValue == defaultValueForSelector){
						$("select[name='"+contentTypeSelectorName+"']").selectmenu("value", defaultValueForSelector);
					}

				}
				
				//Create a select menu with all properties of a content type
				function buildPropertySelector(){
					
					if (! elementExists(propertySelectorName)){
						$('#'+idOfCriterionDiv).append('<div id="'+idOfPropertySelectorDiv+'" class="'+css.selectorDiv+'"></div>');
						$('#'+idOfPropertySelectorDiv).append('<select name="'+propertySelectorName+'" id="'+propertySelectorName+'"></select>');
					}
					else{
						$('#'+propertySelectorName).empty();
					}
					
					var options = '<option value="'+defaultValueForSelector+'">'+message.propertySelector[configuration.locale]+'</option>';
					
					if (contentTypeSelectedValue == defaultValueForSelector){
						//No content type selected. Load only profile
						var contentType = 'administrativeMetadataType';
						
						var getContentTypeModelURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+'/'+configuration.repository+'/model/'+contentType;
	
						$.ajax({
							type: "GET",
							dataType : 'json',
						 		data: {output : 'json'},
						 		async : false,
						 		url : getContentTypeModelURL,
						 		success : function(data){
									options = options +buildOptionsForComplexProperty(data[contentType], css.contentType);
								}
	  
						});
					}
					else{
						options = options +buildOptionsForComplexProperty(repositoryModel[contentTypeSelectedValue], css.contentType);
					}

					$('#'+propertySelectorName).append(options);
					
					$("select[name='"+propertySelectorName+"']").selectmenu({
						style:'dropdown',
						width : 200,
						menuWidth: 500,
						change: function(e, object){
							
								propertySelectedValue = object.value;
								
								buildOperatorSelector();
								
			    			}
						});
					
					buildOperatorSelector();
					
				}
				
				function buildOptionsForComplexProperty(complexProperty, cssClass){
					
					var label=retrieveLabelForProperty(complexProperty, configuration.locale);
					
					var optionGroup = '<optgroup label="'+label+'" class="'+cssClass+'">';
					
					var options = [];
					
					var labelsForSimpleProperty = [];
					var labelsForComplexProperty = [];
					
					$.each(complexProperty.propertyList, function(i, property){

		 				var label=retrieveLabelForProperty(property, configuration.locale);
		 				
		 				if (property.valueType == 'Complex'){
		 					
		 					options[label] = buildOptionsForComplexProperty(property);
		 					labelsForComplexProperty.push(label);
		 					//options = options + buildOptionsForComplexProperty(property);
		 				}
		 				else{
		 					
		 					labelsForSimpleProperty.push(label);
		 					
		 					var value = buildValueForOptionOfPropertySelector(property);
		 					
		 					if (complexProperty.name == 'administrativeMetadataType' && contentTypeSelectedValue == defaultValueForSelector){
		 						value = 'profile.'+value;
		 					}
		 					
		 					//options = options +'<option value="'+value+'" class="'+css.simpleProperty+'"'+ (propertySelectedValue == value ? ' selected="selected"' : '')+'>'+label+'</option>';
		 					options[label] = '<option value="'+value+'" class="'+css.simpleProperty+'"'+ (propertySelectedValue == value ? ' selected="selected"' : '')+'>'+label+'</option>';
		 				}
						
		 			});
					
					//Sort label arrays
					labelsForSimpleProperty.sort(function(a, b) {
						return a == b ? 0 : a < b ? -1 : 1;
					});
					
					labelsForComplexProperty.sort(function(a, b) {
						return a == b ? 0 : a < b ? -1 : 1;
					});

					$.each(labelsForSimpleProperty, function(i, label) {
						optionGroup += options[label];
					});
					
					$.each(labelsForComplexProperty, function(i, label) {
						optionGroup += options[label];
					});
					
					return optionGroup+'</optgroup>';
					
				}
				
				//When selecting a property we need to know property's value type and in cases of references
				//the accepted taxonomies or object types
				//therefore we keep in the option value property's path and property's value type
				//separated by 2 #'s 
				function buildValueForOptionOfPropertySelector(property){
					
					var value = property.path+'##'+property.valueType;
					
					if (property.valueType == 'ObjectReference' && property.acceptedContentTypes != null){
						value += '##'+property.acceptedContentTypes;
					}
					else if (property.valueType == 'TopicReference' && property.acceptedTaxonomies != null){
						value += '##'+property.acceptedTaxonomies;
					}
					
					return value;
				}
				
				function extractPropertyType(propertySelectorOptionValue){
					return propertySelectorOptionValue.split('##')[1];
				}
				
				function extractPropertyPath(propertySelectorOptionValue){
					return propertySelectorOptionValue.split('##')[0];
				}
				
				function extractPropertyAcceptedTaxonomiesOrContentTypes(propertySelectorOptionValue){
					return propertySelectorOptionValue.split('##')[2];
				}

				
				function buildOperatorSelector(){
					
					if (propertySelectedValue != defaultValueForSelector){

						if (! elementExists(operatorSelectorName)){
							$('#'+idOfCriterionDiv).append('<div id="'+idOfOperatorSelectorDiv+'" class="'+css.selectorDiv+'"></div>');
							$('#'+idOfOperatorSelectorDiv).append('<select name="'+operatorSelectorName+'" id="'+operatorSelectorName+'"></select>');
						}
						else{
							$('#'+operatorSelectorName).empty();
						}
					
						
						var selectedPropertyType = extractPropertyType(propertySelectedValue);
						
						$('#'+operatorSelectorName).append(buildOptions(operatorOptionsPerType[selectedPropertyType]));

						$("select[name='"+operatorSelectorName+"']").selectmenu({
							style:'dropdown',
							width : 150,
							change: function(e, object){
								
								operatorSelectedValue = object.value;
								
								buildRestrictionComponent();
								
							}
						});
						
						operatorSelectedValue = $("select[name='"+operatorSelectorName+"']").selectmenu("value");
						
					}
					else{
						if (elementExists(operatorSelectorName)){
							$('#'+operatorSelectorName).remove();
						}
						
						operatorSelectedValue = defaultValueForSelector;
					}

					buildRestrictionComponent();
					
				}
				
				function buildOptions(options){
					
					var optionTemplate = '';
					
					$.each(options, function(i, option){
				
						optionTemplate = optionTemplate +'<option value="'+option.value+'"'+ (operatorSelectedValue == option.value ? 'selected="selected"' : '')+'>'+option.label[configuration.locale]+'</option>'; 
					});
					
					return optionTemplate;
				}
				
				function buildRestrictionComponent(){
					
					if (operatorSelectedValue != defaultValueForSelector){
						
						var selectedPropertyType = extractPropertyType(propertySelectedValue);
						
						if (! elementExists(idOfRestrictionValueComponent)){
							$('#'+idOfCriterionDiv).append('<div id="'+idOfRestrictionDiv+'" class="'+css.selectorDiv+'"></div>');
						}
						else{
							$('#'+idOfRestrictionDiv).empty();
						}
						
						if (operatorSelectedValue != operator.nullOp.value && operatorSelectedValue != operator.notNull.value){
							$('#'+idOfRestrictionDiv).append(inputComponentPerType[selectedPropertyType]);
							
							if (selectedPropertyType == 'ObjectReference'){
								buildAutoCompleteForObjectReference();
							}
							else if (selectedPropertyType == 'TopicReference'){
								buildAutoCompleteForTopicReference();
							}
							else if (selectedPropertyType == 'Date'){
								buildAutoCompleteForDate();
							}
						}
					}
					else{
						if (elementExists(idOfRestrictionDiv)){
							$('#'+idOfRestrictionDiv).remove();
						}
					}
					
					buildCriterionActions();

					
				}
				
				function buildCriterionActions(){
					
					if (! elementExists(idOfCriterionActionsDiv)){
						$('#'+idOfCriterionBuilderDiv).append('<div id="'+idOfCriterionActionsDiv+'" class="'+css.selectorDiv+'"></div>');
						$('#'+idOfCriterionActionsDiv).append('<div id="'+idOfButtonForAddingNewCriterion+'">'+message.addNewCriterion[configuration.locale]+'</div>');

						$( '#'+idOfButtonForAddingNewCriterion).button();
						$( '#'+idOfButtonForAddingNewCriterion).click(function() { 
							addCriterion(); 
						});
					}

					if (contentTypeSelectedValue == defaultValueForSelector && propertySelectedValue == defaultValueForSelector){
						$( '#'+idOfButtonForAddingNewCriterion).hide();
					}
					else{
						$( '#'+idOfButtonForAddingNewCriterion).show();
					}
					
				}
				
				function buildQueryParametersDiv(){
					
					if (! elementExists(idOfQueryParametersDiv)){
						$('#'+idOfContentTab).append('<div id="'+idOfQueryParametersDiv+'"></div>');
					}
					else{
						$('#'+idOfQueryParametersDiv).empty();
					}
					
					buildOutputSelector();
					
					buildOffsetAndLimitComponents();
				}
				
				function buildOutputSelector(){
					
					if (! elementExists(outputSelectorName)){
						$('#'+idOfQueryParametersDiv).append('<div id="'+idOfOutputSelectorDiv+'" class="'+css.selectorDiv+'"></div>');
						$('#'+idOfOutputSelectorDiv).append('<select name="'+outputSelectorName+'" id="'+outputSelectorName+'"></select>');
					}
					else{
						$('#'+outputSelectorName).empty();
					}
				
					var options = '<option value="xml"'+ (outputSelectedValue == 'xml' ? 'selected="selected"' : '')+'>XML</option>';
					options = options + '<option value="json"'+ (outputSelectedValue == 'json' ? 'selected="selected"' : '')+'>JSON</option>';
					
					$('#'+outputSelectorName).append(options);

					$("select[name='"+outputSelectorName+"']").selectmenu({
						style:'dropdown',
						width : 80,
						change: function(e, object){
							outputSelectedValue = object.value;
						}
					});
					
				}
				
				function buildOffsetAndLimitComponents(){
					
					if (! elementExists(idOfOffsetAndLimitDiv)){
						$('#'+idOfQueryParametersDiv).append('<div id="'+idOfOffsetAndLimitDiv+'"></div>');

						var html = '<fieldset>';
						html += '<label for="offset">'+message.offset[configuration.locale]+'</label>';
						html += '<input type="text" name="offset" id="offset" class="text ui-widget-content ui-corner-all" value="'+queryParameter.offset+'" />';
						html += '<label for="limit">'+message.limit[configuration.locale]+'</label>';
						html += '<input type="text" name="limit" id="limit" class="text ui-widget-content ui-corner-all" value="'+queryParameter.limit+'"/>';
						html += '</fieldset>';
						
						$('#'+idOfOffsetAndLimitDiv).append(html);
					}
					
				}
				
				function updateCriteriaDiv(){
					
					$.each($('#'+idOfCriteriaDiv + ' div'), function(index){
						$(this).remove();
					});
					
					$.each(criteriaDSL, function(i, criterionDSL){
						var id = 'criterion'+i;
						
						$('#'+idOfCriteriaDiv).append('<div id="'+id+'">'+criterionDSL+'</div>');
						$( '#'+id).button();
						$( '#'+id).click(function() { 
								
								removeCriterion(i);
							});

					});
					
					if (criteriaDSL != null && criteriaDSL.length >0){
						$('#'+idOfCriteriaDiv).show();
					}
					else{
						$('#'+idOfCriteriaDiv).hide();
					}
					
				}

				function removeCriterion(index){
					
					criteria = removeItemFromArray(criteria, index);
					criteriaDSL = removeItemFromArray(criteriaDSL, index);
					
					updateCriteriaDiv();
					
					updateResourceApiURL();

					
				}
				
				function buildResultsDiv(){
					
					if (! elementExists(idOfResultsDiv)){
						explorer.append('<div id="'+idOfResultsDiv+'"></div>');
					}
					else{
						$('#'+idOfResultsDiv).empty();
					}
					
					$('#'+idOfResultsDiv).append('<div id="'+idOfCriteriaDiv+'" class="ui-widget-content ui-corner-all"></div>');
					$('#'+idOfCriteriaDiv).append('<h3 class="ui-widget-header ui-corner-all">'+message.criteriaDivLabel[configuration.locale]+'</h3>');
					$('#'+idOfCriteriaDiv).hide();

					$('#'+idOfResultsDiv).append('<div id="'+idOfResourseApiURLDiv+'" class="ui-widget-content ui-corner-all"></div>');
					$('#'+idOfResourseApiURLDiv).append('<h3 class="ui-widget-header ui-corner-all">'+message.resourceApiUrlDivLabel[configuration.locale]+'</h3><p></p>');

					$('#'+idOfResultsDiv).append('<div id="'+idOfButtonForGeneratingResults+'">'+message.results[configuration.locale]+'</div>');
					
					
					$( '#'+idOfButtonForGeneratingResults).button();
					$( '#'+idOfButtonForGeneratingResults).click(function() { 
							
							generateResults();
						});
					
					$('#'+idOfResultsDiv).append('<div id="'+idOfButtonForResetingResults+'">'+message.reset[configuration.locale]+'</div>');
					
					
					$( '#'+idOfButtonForResetingResults).button();
					$( '#'+idOfButtonForResetingResults).click(function() { 
							
							initContentTab();
							
							buildResultsDiv();
							
						});

					updateResourceApiURL();
				}
				
				function generateResults(){
					
					if (! elementExists(idOfResultsContainerLabelDiv)){
						$('#'+idOfResultsDiv).append('<div id="'+idOfResultsContainerLabelDiv+'" class="ui-widget-content ui-corner-all"></div>');
						$('#'+idOfResultsContainerLabelDiv).append('<h3 class="ui-widget-header ui-corner-all">'+message.resultsPanelLabel[configuration.locale]+'</h3>');
						
						$('#'+idOfResultsDiv).append('<div id="'+idOfResultsContainerDiv+'"></div>');
					}
					else{
						$('#'+idOfResultsContainerDiv).empty();
					}
					
					$('#'+idOfResultsContainerLabelDiv).css('display', 'none');
					$('#'+idOfResultsContainerDiv).css('display', 'none');

					var result = getContentSearchResponse();
					
					var html = '<pre class=\"brush: ' + (outputSelectedValue == 'xml'? 'xml' : 'js') + ' gutter: false; tab-size: 4;\">' +  result + '</pre>';
					
					$('#'+idOfResultsContainerDiv).append(html);
					$('#'+idOfResultsContainerLabelDiv).css('display', 'block');
					$('#'+idOfResultsContainerDiv).css('display', 'block');
					
			        SyntaxHighlighter.highlight();
			        
				}
				
				function getContentSearchResponse(){
					
					updateResourceApiURL();
					
					var response = '';
					
					 $.ajax({  
				   			type: "GET",
				   			url : baseContentSearchURL,
					   		dataType : 'text', 
					   		data: (queryParameter),				   		
					   		async : false,
					   		beforeSend: function() {
					   			$('#'+idOfResultsDiv).append('<div id="thedialog"><img src="assets/ajax-loader.gif"/></div>');
					   		},
					   		complete: function(){
					   			$('#thedialog').remove();
					   		},
						   	success : function(data){
					   			response = data;
						   	}
					 });

					 return response;
					
				}
				
				function addCriterion(){
					
					var contentTypeCriterion = null;
					
					if (contentTypeSelectedValue != defaultValueForSelector){
						contentTypeCriterion = 'contentTypeName="'+contentTypeSelectedValue+'"';
					}

					var selectedPropertyPath = extractPropertyPath(propertySelectedValue);
					
					var selectedPropertyType = extractPropertyType(propertySelectedValue);
					
					var propertyCriterion; 
					
					if (operatorSelectedValue == operator.nullOp.value || operatorSelectedValue == operator.notNull.value){
						propertyCriterion = selectedPropertyPath +' '+ operatorSelectedValue+' ';
					}
					else{
						if (elementExists(idOfRestrictionValueComponent)){
							
							if (selectedPropertyType == 'ObjectReference'){
								if (referenceSelectedName != null){
									propertyCriterion = selectedPropertyPath +operatorSelectedValue+'"#'+referenceSelectedName+'"';
								}
								else{
									propertyCriterion = null;
								}
							}
							else if (selectedPropertyType == 'TopicReference'){
								if (referenceSelectedName != null){
									propertyCriterion = selectedPropertyPath +operatorSelectedValue+'"#'+referenceSelectedName+'"';
								}
								else{
									propertyCriterion = null;
								}
							}
							else if (selectedPropertyType == 'Date'){
								
								var selectedDateValue = $.datepicker.formatDate('yy-mm-ddT00:00:00.000', $( '#'+idOfRestrictionValueComponent ).datepicker('getDate'));
								
								if (selectedDateValue != null){
									propertyCriterion = selectedPropertyPath +operatorSelectedValue+'"'+selectedDateValue+'"';
								}
								else{
									propertyCriterion = null;
								}
							}
							if (propertyCriterion == null){
								
								if (operatorSelectedValue == operator.contains.value){
									propertyCriterion = selectedPropertyPath +' '+ operatorSelectedValue+' "'+$('#'+idOfRestrictionValueComponent).val()+'"';;
								}
								else{
									propertyCriterion = selectedPropertyPath +operatorSelectedValue+'"'+$('#'+idOfRestrictionValueComponent).val()+'"';
								}
							}
						}
					}
					
					var criterionAdded = false;
					
					var criterionLabel = '';
					
					var contentTypeSelectedLabel = $("select[name='"+contentTypeSelectorName+"'] option:selected").text();
					var propertySelectedLabel = $("select[name='"+propertySelectorName+"'] option:selected").text();
					var operatorSelectedLabel = $("select[name='"+operatorSelectorName+"'] option:selected").text();
					
					var restrictionLabel = '';
					
					if (selectedPropertyType == 'Date'){
						restrictionLabel = $.datepicker.formatDate('dd/mm/yy', $( '#'+idOfRestrictionValueComponent ).datepicker('getDate'));
					}
					else{
						restrictionLabel = $('#'+idOfRestrictionValueComponent).val();
					}

					if (contentTypeCriterion != null){

						if (propertyCriterion != null){

							criteria.push(contentTypeCriterion+ ' AND '+ propertyCriterion);
							
							criterionLabel = contentTypeSelectedLabel + ' '+ propertySelectedLabel + ' '+ operatorSelectedLabel +' '+ restrictionLabel;
						}
						else{
							criteria.push(contentTypeCriterion);
							
							criterionLabel = contentTypeSelectedLabel ;
						}
						
						criterionAdded = true;
					}
					else if (propertyCriterion != null){
						criteria.push(propertyCriterion);
						
						criterionLabel = propertySelectedLabel + ' '+ operatorSelectedLabel +' '+ restrictionLabel;
						
						criterionAdded = true;
					}
					
					if (criterionAdded){
						
						criteriaDSL.push(criterionLabel);
						
						updateCriteriaDiv();
						
						updateResourceApiURL();
						
					}
				}
				
				function updateResourceApiURL(){
					
					if (elementExists(idOfResourseApiURLDiv)){
						$('#'+idOfResourseApiURLDiv + ' p').empty();
					}
					
					buildQueryForContentSearch(); 
					
					$('#'+idOfResourseApiURLDiv +' p').append(contentSearchURL);
					
					
				}
				
				function buildQueryForContentSearch(){
					
					var params = '';
					
					if (criteria.length > 0){
						var crit = buildCriteria();
						params += '&cmsQuery='+ crit;
						queryParameter.cmsQuery = crit;
						
					}
					
					var offset = $('#offset').val(); 
					if (! isNaN(offset) && offset > 0){
						params += '&offset='+offset;
						queryParameter.offset = offset;
					}
					
					var limit = $('#limit').val(); 
					if (! isNaN(limit) && limit > 0 && limit < 10000){
						params += '&limit='+limit;
						queryParameter.limit = limit;
					}
					
					queryParameter.output = outputSelectedValue;
					
					params += '&output='+outputSelectedValue;
					params += '&prettyPrint='+queryParameter.prettyPrint;
					
					params = params.substring(1, params.length);
					
					contentSearchURL = baseContentSearchURL + '?'+ params;

				}
				
				function buildCriteria(){
					
					var cmsQuery = '';
					
					$.each(criteria, function(i, criterion){
						if (i > 0){
							cmsQuery += ' AND '; 
						}
						
						cmsQuery += ' ( ' + criterion + ' ) ';
					});
					
					return cmsQuery;
				}
				
				function buildAutoCompleteForObjectReference(){
					
					 $.widget( "custom.catcomplete", $.ui.autocomplete, {
							_renderMenu: function( ul, items ) {
								var self = this,
									currentCategory = "";
								$.each( items, function( index, item ) {
									if ( item.category != currentCategory ) {
										ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
										currentCategory = item.category;
									}
									self._renderItem( ul, item );
								});
							}
						});

					$( '#'+idOfRestrictionValueComponent ).catcomplete({
						source: function( request, response ) {
							
							 var getContentObjectURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+'/'+configuration.repository+'/contentObject';

							 var acceptedContentTypes = extractPropertyAcceptedTaxonomiesOrContentTypes(propertySelectedValue);

							 if (acceptedContentTypes == undefined && acceptedContentTypes == null){
								 acceptedContentTypes = defaultValueForSelector;
							 }
							 
							 var suggestionData = [];
							 
							 //For each content type we perform one query and we categorize the results
							 $.each(acceptedContentTypes.split(','), function(index, contentType){
									
								 var contentTypeCriterion = '';
								 var category = message.anyContentTypeCategory[configuration.locale];
								 var attachContentTypeLabelToCategory = true;
								 
								 	if (contentType != defaultValueForSelector){
										 contentTypeCriterion =  ' contentTypeName="'+contentType+'" AND ';
										 category = retrieveLabel(repositoryModel[contentType].label, configuration.locale);
										 attachContentTypeLabelToCategory = false;
									 }
								 
									$.ajax({
										type : 'GET',
										url: getContentObjectURL,
										dataType: "json",
										async : false,
								   		data: {
								   			cmsQuery : contentTypeCriterion+' profile.title CONTAINS "'+request.term+'*"', 
								   			output : 'json', 
								   			projectionPaths : 'profile.title', 
								   			orderBy: 'profile.title asc', 
								   			limit: '100'
								   		},				   		
										success: function( data ) {
											
											if (data.totalResourceCount > 0){
												$.each( data.resourceCollection.resource, function(index,  resource ) {
													
													var contentTypeLabel = '';
													
													if (attachContentTypeLabelToCategory){
														contentTypeLabel = ' - '+ retrieveLabel(repositoryModel[resource.contentObjectTypeName].label, configuration.locale);
													}
													
													suggestionData.push({
																		label: resource.profile.title + contentTypeLabel,
																		value: resource.systemName,
																		category : category 
																	});
												});
											}
										}
									});
							 });
							 
							 if (suggestionData.length == 0){
									referenceSelectedName = null;
							 }
							 else{
								 //Sort according to category 
								 suggestionData.sort(function(a, b) {
										var categoryCompare = a.category == b.category ? 0 : a.category < b.category ? -1 : 1;
										
										if (categoryCompare == 0){
											return a.label == b.label ? 0 : a.label < b.label ? -1 : 1;
										}
									});
							 }
							 
							 response(suggestionData);
						},
						minLength: 2,
						select: function( event, ui ) {
							
							//Keep the value of the selected option in a separate variable to be usede when building the criterion
							//and set the label of the selected option as input text's value.
							referenceSelectedName = ui.item.value;
							
							$( '#'+idOfRestrictionValueComponent ).val(ui.item.label);
							
							return false;
						},
						focus: function( event, ui ) {
							//Executed when user moves up or down the options of the autocomplete
							//While users navigates, we want the label of the option to be displayed in the input text
							//not its value which is the default case
							$( '#'+idOfRestrictionValueComponent ).val(ui.item.label);
							
							return false;
						},
						open: function() {
							$( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
						},
						close: function() {
							$( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
						}
					});


				}
				
				function buildAutoCompleteForTopicReference(){
					
					 $.widget( "custom.catcomplete", $.ui.autocomplete, {
							_renderMenu: function( ul, items ) {
								var self = this,
									currentCategory = "";
								$.each( items, function( index, item ) {
									if ( item.category != currentCategory ) {
										ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
										currentCategory = item.category;
									}
									self._renderItem( ul, item );
								});
							}
						});

					$( '#'+idOfRestrictionValueComponent ).catcomplete({
						source: function( request, response ) {
							
							 var getTopicURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+'/'+configuration.repository+'/topic';

							 var acceptedTaxonomies = extractPropertyAcceptedTaxonomiesOrContentTypes(propertySelectedValue);

							 if (acceptedTaxonomies == undefined && acceptedTaxonomies == null){
								 acceptedTaxonomies = defaultValueForSelector;
							 }
							 
							 var suggestionData = [];
							 
							 //For each content type we perform one query and we categorize the results
							 $.each(acceptedTaxonomies.split(','), function(index, taxonomy){
									
								 var taxonomyCriterion = '';
								 var category = message.anyTaxonomyCategory[configuration.locale];
								 var attachTaxonomyLabelToCategory = true;
								 
								 	if (taxonomy != defaultValueForSelector){
								 		taxonomyCriterion =  ' taxonomy="'+taxonomy+'" AND ';
										 category = retrieveLabelForTaxonomy(taxonomy);
										 attachTaxonomyLabelToCategory = false;
									 }
								 
									$.ajax({
										type : 'GET',
										url: getTopicURL,
										dataType: "json",
										async : false,
								   		data: {
									   		cmsQuery : taxonomyCriterion+' label CONTAINS "'+request.term+'*"',
									   		output : 'json', 
									   		orderBy: 'label.'+configuration.locale+' asc',
								   			limit: '100'
								   		},				   		
										success: function( data ) {
											
											if (data.totalResourceCount > 0){
												$.each( data.resourceCollection.resource, function(index,  resource ) {
													
													var taxonomyLabel = '';
													
													if (attachTaxonomyLabelToCategory && resource.taxonomy != undefined && resource.taxonomy.localization != undefined ){
														taxonomyLabel = ' - '+ retrieveLabel(resource.taxonomy.localization.label, configuration.locale);
													}

													suggestionData.push({
																		label: retrieveLabelForTopic(resource, configuration.locale) + taxonomyLabel,
																		value: resource.name,
																		category : category
																	});
												});
											}
										}
									});
							 });
							 
							 if (suggestionData.length == 0){
									referenceSelectedName = null;
							 }			
							 else{
								 //Sort according to category 
								 suggestionData.sort(function(a, b) {
										var categoryCompare = a.category == b.category ? 0 : a.category < b.category ? -1 : 1;
										
										if (categoryCompare == 0){
											return a.label == b.label ? 0 : a.label < b.label ? -1 : 1;
										}
									});
							 }

							 
							 response(suggestionData);
						},
						minLength: 2,
						select: function( event, ui ) {
							
							//Keep the value of the selected option in a separate variable to be usede when building the criterion
							//and set the label of the selected option as input text's value.
							referenceSelectedName = ui.item.value;
							
							$( '#'+idOfRestrictionValueComponent ).val(ui.item.label);
							
							return false;
						},
						focus: function( event, ui ) {
							//Executed when user moves up or down the options of the autocomplete
							//While users navigates, we want the label of the option to be displayed in the input text
							//not its value which is the default case
							$( '#'+idOfRestrictionValueComponent ).val(ui.item.label);
							
							return false;
						},
						open: function() {
							$( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
						},
						close: function() {
							$( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
						}
					});


				}
				
				function buildAutoCompleteForDate(){
					
					$( '#'+idOfRestrictionValueComponent ).datepicker(
							configuration.locale == 'en' ? $.datepicker.regional[ 'en-GB' ] : $.datepicker.regional[ configuration.locale ], 
							{ 
								dateFormat: 'dd/mm/yy'
							}
					);
					
				}

				function retrieveLabelForTaxonomy(taxonomy){
					
					var label = '';
					
					var getTaxonomyURL = 'http://'+configuration.astroboaServer+configuration.resourceApiBaseURL+'/'+configuration.repository+'/taxonomy';
					
					$.ajax({  
			   			type: "GET",
			   			url : getTaxonomyURL+'/'+taxonomy,
				   		dataType : 'json', 
				   		data: {output : 'json'},				   		
				   		async : false,
					   	success : function(data){
				   			label =  retrieveLabel(data.localization.label, configuration.locale);
					   	}
					});
					
					return label;
				}

				function retrieveLabelForContentType(contentType, locale){
					
					var label =  null;
					
					if (contentType != undefined){
						label =  retrieveLabel(contentType.label, locale);
						
						if (label == null){
							label = contentType.name;
						}
					}

					
					return label;
				}

				function retrieveLabelForProperty(property, locale){
					
					var label =  null;
					
					if (property != undefined){
						label =  retrieveLabel(property.label, locale);
						
						if (label == null){
							label = property.name;
						}
					}

					
					return label;
				}

				function retrieveLabelForTopic(topic, locale){
					var label =  retrieveLabel(topic.localization.label, locale);

					if (label == null){
						label = topic.name;
					}
					
					return label;
				}

				function retrieveLabel(label, locale){

					if (label != undefined){
						
						if (label[locale] != undefined && label[locale] != null){
							return label[locale];
						}
						else if (locale != 'en' && label.en != undefined && label.en != null){
							return label.en;
						}
					}
					
					return null;
				}

				function elementExists(elementId){
					return $("#"+elementId).length > 0;
				}
			
				function removeItemFromArray(array , index){
					return $.map(array, function(a, i) {
							if (i == index){
								return null;
							}
						  return a;
						}); 
				}
				
				function sortSelectorOptions(selectorName){
					
					// Sort all the options by text
					$('#'+selectorName).html($("option", $('#'+selectorName)).sort(function(a, b) {
						return a.text == b.text ? 0 : a.text < b.text ? -1 : 1;
					}));
		
				}
		  }); 
		
	};
	
})(jQuery);